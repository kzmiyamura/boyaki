type Mentor @model @searchable @auth(rules: [{allow: owner, identityClaim: "sub", provider: userPools, operations: [create, read, update, delete]}, {allow: public, provider: apiKey, operations: [read, update]}, {allow: groups, groups: ["admin", "Admins"], operations: [read, update]}]) {
  id: ID!
  owner: String!
  name: String!
  active: Boolean
  tokenAddress: [String]
  profilePic: AWSURL
  priceMonth: Int
  priceMin: Int
  message: String
  ability: String
  sex: String
  tags: [String]
  reviewsLength: Int
  rating: Float
  score: [Float]
  lastLogin: String
  online: Boolean
  video: Boolean
  notificationsRead: Boolean
  searchable: Boolean
  canRank: Boolean
  allowTrial: Boolean
  idDocToken: String
  idDocTokenBack: String
  year: Int
  month: Int
  location: String
  gallery: [AWSURL]
  twitter: String
  facebook: String
  instagram: String
  youtube: String
  defaultDash: Boolean
  availability: String
  availDetail: String
  disabled: Boolean
  grade: Int
  publish: Boolean
  ban: Boolean
  createdAt: String
  updatedAt: String
  statNumConnections: Int
  statNumFavorites: Int
}

type MentorSetting @model(subscriptions: null) @auth(rules: [{allow: owner, identityClaim: "sub", provider: userPools, operations: [read, create, update, delete]}, {allow: groups, groups: ["admin", "Admins"], operations: [read, update]}]) {
  id: ID!
  owner: String! @index(name: "ByOwner", queryField: "mentorSettingByOwner")
  receivedRequestEmail: Boolean
  contractStopEmail: Boolean
  receiveMessageEmail: Boolean
  receiveChatEmail: Boolean
  receiveReviewEmail: Boolean
  receiveInfoEmail: Boolean
  stripeAccountId: String
  mentorId: String
  loginMode: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Client @model @searchable @auth(rules: [{allow: owner, identityClaim: "sub", operations: [read, create, update, delete]}, {allow: public, provider: apiKey, operations: [read]}, {allow: groups, groups: ["admin", "Admins"], operations: [read, update, delete]}]) {
  id: ID!
  owner: String!
  name: String!
  email: AWSEmail!
  active: Boolean
  tokenAddress: [String]
  profilePic: AWSURL
  intro: String
  tags: [String]
  reviewsLength: Int
  rating: Float
  score: [Float]
  sex: String
  location: String
  year: Int
  month: Int
  hasCredit: Boolean
  dashSetting: Boolean
  mobileDashSetting: Boolean
  createdAt: String
  updatedAt: String
  lastLogin: String
  acceptRequestEmail: Boolean
  contractStopEmail: Boolean
  receiveMessageEmail: Boolean
  receiveChatEmail: Boolean
  receiveVideoEmail: Boolean
  receiveReviewEmail: Boolean
  receiveInfoEmail: Boolean
  stripeCustomerId: String
  ban: Boolean
}

type OneSignal @model(subscriptions: null) @auth(rules: [{allow: owner, identityClaim: "sub", operations: [create, update, delete, read]}, {allow: groups, groups: ["admin", "Admins"], operations: [read]}]) {
  owner: String! @primaryKey
  playerIds: [String]
  createdAt: String
  updatedAt: String
}

type MobileNotifications @model(subscriptions: null) @auth(rules: [{allow: owner, identityClaim: "sub", operations: [create, update, delete, read]}, {allow: groups, groups: ["admin", "Admins"], operations: [read]}]) {
  owner: String! @primaryKey
  optOutPushNotifications: Boolean
  addresses: [String]
  addressesAndroid: [String]
  addressesIOS: [String]
  createdAt: String
  updatedAt: String
}

type Connection @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  type: String!
  favorite: Boolean
  mentorRead: Boolean
  clientRead: Boolean
  status: String! @index(name: "ByStatus", queryField: "connectionsByStatus")
  contractAccept: String
  contractStop: String
  contractReject: String
  title: String
  message: String
  response: String
  sender: String! @index(name: "BySender", queryField: "connectionsBySender", sortKeyFields: ["updatedAt"])
  senderName: String
  senderPic: AWSURL
  receiver: String! @index(name: "ByReceiver", queryField: "connectionsByReceiver", sortKeyFields: ["updatedAt"])
  receiverName: String
  receiverPic: AWSURL
  priceMonth: Int
  priceMin: Int
  mentorExpiredList: Boolean
  clientExpiredList: Boolean
  trial: Boolean
  trialId: String
  createdAt: String
  updatedAt: String
  sortDateTime: String
  discarder: String
}

type DeletedConnection @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  stripeCustomerId: String
  status: String
  contractAccept: String
  contractStop: String
  contractReject: String
  sender: String @index(name: "BySender", queryField: "deletedConnectionsBySender", sortKeyFields: ["updatedAt"])
  senderName: String
  receiver: String @index(name: "ByReceiver", queryField: "deletedConnectionsByReceiver", sortKeyFields: ["updatedAt"])
  receiverName: String
  priceMonth: Int
  priceMin: Int
  createdAt: String
  updatedAt: String
  sortDateTime: String
  expirationEpoch: AWSTimestamp
}

type Chat @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID!
  conversationID: ID
  client: String! @index(name: "ByClientByMentor", queryField: "chatsByClientByMentor", sortKeyFields: ["mentor"]) @index(name: "ByClientByClientRead", queryField: "chatsByClientByClientRead", sortKeyFields: ["clientRead"])
  mentor: String! @index(name: "ByMentorByMentorRead", queryField: "chatsByMentorByMentorRead", sortKeyFields: ["mentorRead"])
  from: String!
  fromName: String
  fromPic: AWSURL
  to: String!
  date: String!
  text: String
  img: AWSURL
  stamp: String
  clientRead: String!
  mentorRead: String!
  clientNotified: String!
  mentorNotified: String!
  createdAt: String
  updatedAt: String
  sortDateTime: String
}

type ChatRoom @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  mentor: Boolean
  mentorId: String!
  client: Boolean
  clientId: String! @index(name: "ByClientIdByMentorId", queryField: "chatRoomByClientIdByMentorId", sortKeyFields: ["mentorId"])
  createdAt: String
  updatedAt: String
}

type Message @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  read: Boolean
  sender: String! @index(name: "BySender", queryField: "messagesBySender", sortKeyFields: ["createdAt"])
  senderName: String
  senderPic: String
  receiver: String! @index(name: "ByReceiver", queryField: "messagesByReceiver", sortKeyFields: ["createdAt"])
  receiverStatus: String!
  receiverName: String
  receiverPic: String
  title: String
  message: String
  createdAt: String
  updatedAt: String
}

type MessageNotification @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  read: Boolean
  type: String!
  value: Boolean
  sender: String!
  senderStatus: String
  senderName: String
  senderPic: AWSURL
  receiver: String! @index(name: "ByReceiver", queryField: "messageNotificationsByReceiver", sortKeyFields: ["createdAt"])
  createdAt: String
  updatedAt: String
  sortDateTime: String!
}

type Review @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  type: String
  read: Boolean!
  content: String!
  rating: Float!
  sender: String! @index(name: "BySender", queryField: "reviewsBySender", sortKeyFields: ["createdAt"])
  senderStatus: String!
  senderName: String!
  senderPic: String!
  senderMonth: Int
  senderYear: Int
  senderSex: String
  receiver: String! @index(name: "ByReceiver", queryField: "reviewsByReceiver", sortKeyFields: ["createdAt"])
  receiverName: String
  comment: String
  createdAt: String
  updatedAt: String
  sortDateTime: String!
}

type ReviewResponseNotification @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  type: String
  read: Boolean!
  sender: String!
  senderName: String!
  senderPic: String!
  senderMonth: Int
  senderYear: Int
  senderSex: String
  receiver: String! @index(name: "ByReceiver", queryField: "reviewResponsesByReceiver", sortKeyFields: ["createdAt"])
  createdAt: String
  updatedAt: String
  sortDateTime: String!
}

type VideoNotification @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  type: String!
  read: Boolean
  title: String
  failed: Boolean
  content: String
  sender: String!
  senderName: String
  senderPic: AWSURL
  mentorsClientName: String
  mentorsClientId: String
  receiver: String! @index(name: "ByReceiver", queryField: "videoNotificationByReceiver", sortKeyFields: ["createdAt"])
  createdAt: String
  updatedAt: String
  sortDateTime: String!
  failedTime: String
  expirationEpoch: AWSTimestamp
}

type ExitVideoNotification @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  type: String!
  read: Boolean
  title: String
  content: String
  sender: String!
  senderName: String
  senderPic: AWSURL
  mentorsClientName: String
  mentorsClientId: String
  receiver: String! @index(name: "ByReceiver", queryField: "exitVideoNotificationByReceiver", sortKeyFields: ["createdAt"])
  createdAt: String
  updatedAt: String
  sortDateTime: String!
  expirationEpoch: AWSTimestamp
}

type PriceChangeNotification @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  type: String!
  read: Boolean
  content: String
  sender: String!
  senderPic: AWSURL
  senderName: String
  oldPriceMin: Int
  newPriceMin: Int
  oldPriceMonth: Int
  newPriceMonth: Int
  receiver: String! @index(name: "ByReceiver", queryField: "priceChangeNotificationsByReceiver", sortKeyFields: ["createdAt"])
  createdAt: String
  updatedAt: String
  sortDateTime: String
}

type ServerNotification @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  receiver: String! @index(name: "ByReceiver", queryField: "serverNotificationsByReceiver")
  read: Boolean!
  type: String!
  title: String
  message: String
  sortDateTime: String!
  createdAt: String
  updatedAt: String
  expirationEpoch: AWSTimestamp
}

type Favorite @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  clientId: String! @index(name: "ByClientId", queryField: "favoritesByClientId", sortKeyFields: ["updatedAt"])
  mentorId: String! @index(name: "ByMentorId", queryField: "favoritesByMentorId", sortKeyFields: ["updatedAt"])
  createdAt: String
  updatedAt: String
}

type Coupon @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  mentorId: String! @index(name: "ByMentorId", queryField: "couponByMentorId")
  promoCode: String! @index(name: "ByPromoCode", queryField: "couponByPromoCode")
  isValid: Boolean!
  user: String @index(name: "ByUser", queryField: "couponByUser")
  read: Boolean!
  readAgain: Boolean!
  receiverRead: Boolean!
  allReadyMentor: Boolean
  type: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  sortDateTime: String
}

type Banner @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  text: String!
  display: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ProductHistory @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  mentorId: String!
  priceMonth: Int
  priceMin: Int
  coupon: Int
  grade: Int
  publish: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type FeePlan @model @auth(rules: [{allow: private}]) {
  id: ID!
  planType: String!
  name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type BasicFeePlanParam @model @auth(rules: [{allow: private}]) {
  id: ID!
  planId: String! @primaryKey(sortKeyFields: ["startDateTime"])
  defaultPlatformFee: Float!
  stripeFutureFee: Float!
  tax: Float!
  couponDiscount: Float!
  maxValidCoupons: Int!
  transferReversalFee: Int!
  transferReversalRefundFee: Int!
  comment: String
  startDateTime: AWSDateTime!
  editorClientId: String!
  editorName: String!
  editorEmail: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PurchaseHistory @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  mentorId: String!
  clientId: String!
  mentorName: String
  clientName: String
  productType: String
  price: Int
  billingAmount: Int
  amount: Int
  transfer: Int
  transferReversalFee: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type InvoicePaid @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  invoiceId: String! @primaryKey(sortKeyFields: ["createdAt"])
  stripeAccountId: String!
  stripeCustomerId: String!
  mentorId: String!
  clientId: String!
  mentorName: String
  clientName: String
  productType: String
  isCanceled: Boolean
  isTransfer: Boolean
  price: Int
  stripeBillingAmount: Int
  billingAmount: Int
  amount: Int
  totalFee: Int
  stripeFee: Int
  transfer: Int
  transferReversalFee: Int
  transferReversalRefundFee: Int
  tax: Float
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type InvoiceFailed @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  invoiceId: String! @primaryKey(sortKeyFields: ["createdAt"])
  stripeAccountId: String!
  stripeCustomerId: String!
  mentorId: String!
  clientId: String!
  mentorName: String
  clientName: String
  productType: String
  isCanceled: Boolean
  isTransfer: Boolean
  price: Int
  stripeBillingAmount: Int
  billingAmount: Int
  amount: Int
  totalFee: Int
  stripeFee: Int
  transfer: Int
  transferReversalFee: Int
  transferReversalRefundFee: Int
  tax: Float
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Trial @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  mentorId: String!
  clientId: String!
  startedEmailSend: Boolean!
  startedEmailSendDateTime: AWSDateTime
  startedEmailScheduleId: String
  willEndEmailSend: Boolean!
  willEndEmailSendDateTime: AWSDateTime
  willEndEmailScheduleId: String
  endDateTime: AWSDateTime
  contract: String!
  writeReview: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type EmailSchedule @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  email: AWSEmail!
  purpose: String!
  subject: String!
  text: String!
  sendDateTime: AWSDateTime!
  metadata: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type BasicContract @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  mentorId: String!
  clientId: String!
  stripeAccountId: String!
  stripeCustomerId: String!
  startDateTime: AWSDateTime!
  endDateTime: AWSDateTime
  chatSubscriptionId: String!
  videoSubscriptionId: String!
  priceMonth: Int!
  priceMin: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type BasicContractSoon @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  mentorId: String!
  clientId: String!
  stripeAccountId: String!
  stripeCustomerId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type BasicContractLater @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  mentorId: String!
  clientId: String!
  stripeAccountId: String!
  stripeCustomerId: String!
  startDateTime: AWSDateTime!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ReservationStopMentoring @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  mentorId: String!
  clientId: String!
  stopDateTime: AWSDateTime!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MasterData @model(subscriptions: null) @auth(rules: [{allow: public, provider: apiKey, operations: [read]}, {allow: groups, groups: ["admin", "Admins"]}]) {
  id: ID!
  category: String! @index(name: "ByCategory", queryField: "masterDataByCategory")
  name: String! @index(name: "ByName", queryField: "masterDataByName")
  value: String!
  explain: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MailTemplate @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  id: ID!
  purpose: String! @index(name: "ByPurpose", queryField: "mailTemplateByPurpose")
  subject: String!
  text: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type VideoTimestamp @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  usageRecordId: String! @primaryKey(sortKeyFields: ["createdAt"])
  quantity: Int!
  mentorId: String!
  clientId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MentorGradeMaster @model(subscriptions: null) @auth(rules: [{allow: private}]) {
  grade: Int! @primaryKey
  name: String
  priceMonthMinimum: Int!
  priceMonthMaximum: Int!
  priceMinMinimum: Int!
  priceMinMaximum: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MentorGradeUpRequest @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  mentorId: String! @index(name: "ByMentorId", queryField: "mentorGradeUpRequestByMentorId", sortKeyFields: ["createdAt"])
  currentGrade: Int!
  status: String!
  priceMonth: Int
  priceMin: Int
  judge: String
  accept: Boolean
  reason: String
  certificates: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type LightNotice @model(subscriptions: null) @searchable @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  type: String!
  noticeType: String!
  owner: String! @index(name: "ByOwner", queryField: "lightNoticeByOwner", sortKeyFields: ["createdAt"])
  read: Boolean!
  title: String
  message: String
  sortDateTime: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Subscription {
  onCreateVideoNotification(receiver: String): VideoNotification @aws_subscribe(mutations: ["createVideoNotification"])
  onUpdateVideoNotification(receiver: String): VideoNotification @aws_subscribe(mutations: ["updateVideoNotification"])
  onDeleteVideoNotification(receiver: String): VideoNotification @aws_subscribe(mutations: ["deleteVideoNotification"])
  onCreateExitVideoNotification(receiver: String): ExitVideoNotification @aws_subscribe(mutations: ["createExitVideoNotification"])
  onDeleteExitVideoNotification(receiver: String): ExitVideoNotification @aws_subscribe(mutations: ["deleteExitVideoNotification"])
  onCreateMessageNotification(receiver: String): MessageNotification @aws_subscribe(mutations: ["createMessageNotification"])
  onUpdateMessageNotification(receiver: String): MessageNotification @aws_subscribe(mutations: ["updateMessageNotification"])
  onDeleteMessageNotification(receiver: String): MessageNotification @aws_subscribe(mutations: ["deleteMessageNotification"])
  onCreatePriceChangeNotification(receiver: String): PriceChangeNotification @aws_subscribe(mutations: ["createPriceChangeNotification"])
  onReviewResponseNotification(receiver: String): ReviewResponseNotification @aws_subscribe(mutations: ["createReviewResponseNotification"])
  onCreateChat(mentor: String, client: String): Chat @aws_subscribe(mutations: ["createChat"])
  onUpdateChat(mentor: String, client: String): Chat @aws_subscribe(mutations: ["updateChat"])
  onCreateChatByMentor(mentor: String): Chat @aws_subscribe(mutations: ["createChat"])
  onCreateChatByClient(client: String): Chat @aws_subscribe(mutations: ["createChat"])
  onUpdateChatByMentor(mentor: String): Chat @aws_subscribe(mutations: ["createChat"])
  onUpdateChatByClient(client: String): Chat @aws_subscribe(mutations: ["createChat"])
  onCreateMessage(receiver: String): Message @aws_subscribe(mutations: ["createMessage"])
  onCreateServerNotification(receiver: String): ServerNotification @aws_subscribe(mutations: ["createServerNotification"])
  onCreateReview(receiver: String): Review @aws_subscribe(mutations: ["createReview"])
  onUpdateReview(sender: String): Review @aws_subscribe(mutations: ["updateReview"])
  onDeleteReview(receiver: String): Review @aws_subscribe(mutations: ["deleteReview"])
  onCreateConnection(receiver: String): Connection @aws_subscribe(mutations: ["createConnection"])
  onUpdateConnection(sender: String): Connection @aws_subscribe(mutations: ["updateConnection"])
  onUpdateReceiverConnection(receiver: String): Connection @aws_subscribe(mutations: ["updateConnection"])
  onDeleteConnection(receiver: String): Connection @aws_subscribe(mutations: ["deleteConnection"])
  onUpdateChatRoom(mentorId: String, clientId: String): ChatRoom @aws_subscribe(mutations: ["updateChatRoom"])
  onCreateCoupon(mentorId: String, allReadyMentor: Boolean): Coupon @aws_subscribe(mutations: ["createCoupon"])
  onUpdateCoupon(mentorId: String): Coupon @aws_subscribe(mutations: ["updateCoupon"])
}